git config --global user.name : 사용자 등록

git config --global user.email : 사용자 이메일 등록 

git config --list : 명령어

mkdir local : local 폴더 만들기

cd local : local 폴더로 이동

git init : git 폴더 생성 

echo 'a' >> a.txt : a라는 내용의 a라는 제목을 가진 txt파일 생성

git status : 상태 확인

git add . : 추적할 수 있게 등록 (.이 파일 전체를 의미)

git rm --cached a.txt : a.txt 추적 삭제

vi a.txt : a.txt 편집[ i(편집), End(편집종료), :(나갈때모드), w(저장), q(나가기)

git commit : commmit 등록

git log : log 확인

git log --oneline : log 한줄 요약

git commit -m ' ' : commit 간편 등록

git remote add origin 주소 : github 등록

git push origin main : 파일 github에 올리기

git push -f origin main : github에 강제로 그 전 버전 업데이트 할때, 강제로 commit

git reset --soft HEAD^ : 바로 전 commit 삭제 
 
git update-ref -d HEAD : commit 전체 리셋

git pull origin main : github에 있는 파일 가져오기

git pull --allow-unrelated-histories origin main : github에서 강제로 가져오기

git clone 주소 : github에서 통째로 가져오기

git commit --ammend -m ' ' : 그 전 commit 수정

# git branch
현재 저장소(레파지토리)에 있는 브랜치 목록

# git branch -a
로컬+원격 모든 브랜치 표시

# git fetch
내 파일에 변화는 없지만 내 git은
"아, 원격 저장소(main)에 이런 커밋이 생겼구나!"
라고 참고 정보 업데이트를 달아두는 것
+ 정리표
명령어	내 파일 바뀜?	설명
git fetch	❌			최신 정보만 받고, 실제 파일은 그대로
git merge	⭕			직접 merge 하면, 그때 내 파일 바뀜
git pull	⭕			최신 정보 받고, 내 파일도 자동 병합

# git fetch --prune
원격 저장소(GitHub 등)의 최신 브랜치 정보를 "로컬"로 가져옴

# git checkout 브랜치명
다른 브랜치로 이동 

# git push origin --delete 브랜치명
원격 브랜치 삭제

# git branch -d 브랜치명
내 로컬 브랜치 삭제(필요시)

# git push --set-upstream origin 브랜치명
푸시할때 어떤 브랜치에 푸시하는지 설정 (ex: git push)

# git fetch origin(원격 저장소의 최신 내용만 확인 & 로컬에 동기화(코드에는 영향 없음))
   git reset --hard origin/상대 브랜치 이름(로컬 코드를 상대 브랜치 코드와 완전히 동일하게 맞춤)
   git push --force-with-lease(원격도 강제로 덮어쓰기) 
다른 브랜치 코드 강제로 덮고 강제로 푸시